import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error
import math
import pylab
import scipy.stats as stats

# Load the dataset
df = pd.read_csv("/kaggle/input/focusing-on-mobile-app-or-website/Ecommerce Customers")

# Display dataset info and description
df.info()  # Info about the dataset (types, non-null counts)
df.describe()  # Summary statistics of the dataset

# Data Visualization
# Joint plot between Time on App and Yearly Amount Spent
sns.jointplot(x="Time on App", y="Yearly Amount Spent", data=df, alpha=0.5)
# Pair plot for scatter plots of all numerical features
sns.pairplot(df, kind='scatter', plot_kws={'alpha': 0.4})
# Linear model plot to show the relationship between Length of Membership and Yearly Amount Spent
sns.lmplot(x='Length of Membership', y='Yearly Amount Spent', data=df, scatter_kws={'alpha': 0.4})

# Prepare the data for training
# Defining feature matrix X and response vector y
X = df[['Avg. Session Length', 'Time on App', 'Time on Website', 'Length of Membership']]
y = df['Yearly Amount Spent']
# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Training the model
lm = LinearRegression()
lm.fit(X_train, y_train)  # Fitting the model on training data
cdf = pd.DataFrame(lm.coef_, X.columns, columns=['coef'])  # Creating a DataFrame for coefficients
print(cdf)

# Making predictions
predictions = lm.predict(X_test)

# Visualizing predictions
# Scatter plot to visualize predictions versus actual values
sns.scatterplot(x=predictions, y=y_test)
plt.xlabel('Predictions')
plt.ylabel('Actual Values')
plt.title('Our Model Predictions')
plt.show()

# Evaluating the model
# Printing error metrics to evaluate model performance
print("Mean Absolute Error:", mean_absolute_error(y_test, predictions))
print("Mean Squared Error:", mean_squared_error(y_test, predictions))
print("ROOT MEAN SQUARED ERROR:", math.sqrt(mean_squared_error(y_test, predictions)))

# Residuals analysis
residuals = y_test - predictions  # Calculating residuals
# Distribution plot of residuals
sns.displot(residuals, bins=40, kde=True)

# Probability plot
# Generating a probability plot to check the normality of residuals
stats.probplot(residuals, dist="norm", plot=pylab)
pylab.show()


